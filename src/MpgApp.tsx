////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Mpg App module
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import React from 'react';
import Amplify, {Auth, API, graphqlOperation} from 'aws-amplify';
import { FederatedSignInOptions, CognitoHostedUIIdentityProvider } from "@aws-amplify/auth/lib/types"
import awsconfig from './aws-exports';
import { Hub } from 'aws-amplify';
import * as queries from './graphql/queries'
import * as mutations from './graphql/mutations';
import MpgUser from "./MpgUser"
Amplify.configure(awsconfig);
const federatedSignInOptions: FederatedSignInOptions = {provider: CognitoHostedUIIdentityProvider.Google}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// define state and props
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
interface IMpgAppProps {}
interface IMpgAppState {
  userEmail: string
  allUserEmails: string[]
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MpgApp
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MpgApp extends React.Component<IMpgAppProps,IMpgAppState>{
  private _currentUser: MpgUser = new MpgUser()
  constructor(props: IMpgAppProps){
    super(props)
    Hub.listen('auth', (data) => {
      const { payload } = data;
      this.onAuthEvent(payload);           
      console.log('A new auth event has happened: ', data.payload.data.username + ' has ' + data.payload.event);
  })
    this.state = {
      userEmail: "No email",
      allUserEmails: [],
    }
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // render
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  render = () =>{
    const list = this.state.allUserEmails
    return (
      <div>
        <h1>My Graph</h1>
        <p>Current user: {this.state.userEmail} </p>
        <p>All users: </p> 
        <ul>
            {list.map(item => {
          return <li key={item}>{item}</li>;
        })}
        </ul>
        <button onClick={() => this.signIn()}>Sign In</button>
        <p>       </p>
        <button onClick={() => this.signOut()}>Sign Out</button>
      </div>
    )
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // onAuthEvent
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  onAuthEvent = async (payLoad: any) =>{
    await this.getCurrentUser()
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // getCurrentuser
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  getCurrentUser = async ()=>{
    await Auth.currentSession()
    .then(data => {
        let idToken = data.getIdToken();
        console.dir(idToken);
        let email = idToken.payload.email;
        this.setState({userEmail: email})
        console.log(email);
    })
    .catch(err => console.log(err));
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // signOut
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  signOut = async ()=>{
    try{
      console.log('Signing out')
      const response = await Auth.signOut()
      console.log('Successful response from signout. Response:',response)
      await this.getCurrentUser()
    } catch(err){
      console.log(err)
    }
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // signIn
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  signIn = async ()=>{
    try{
      console.log('Signing In')
      const response = await Auth.federatedSignIn(federatedSignInOptions)
      console.log('Successful response from signIn. Response:',response)
      await this.getCurrentUser()

    } catch(err){
      console.log(err)
    }
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // component did mount
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  componentDidMount = async ()=>{
    await this.getCurrentUser()
    await this.listUsers()
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // list users
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  listUsers = async () =>{
    const allUsers = await API.graphql(graphqlOperation(queries.listUsers));
    console.log("Users:", allUsers);
    // await this.setState({allUserEmails: allUsers})
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // checkAndAddUser
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  checkAndAddUser = (userEmail: string)=>{
    // check if user exists and add if it does not exist
    if(!this.state.allUserEmails.includes(userEmail)){
      this.createNewUser(userEmail)
    }
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // create a new user
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  createNewUser = async (userEmail: string)=>{
    const newUserData = {
      email: userEmail,
      name: "No name"
    }

    const newUser = await API.graphql(graphqlOperation(mutations.createUser, {input: newUserData}));
    console.log("New user added. newUser:",newUser)
  }
}
export default MpgApp
